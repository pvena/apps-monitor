#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble

\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Implementación
\begin_inset CommandInset label
LatexCommand label
name "chap:Implementación"

\end_inset


\end_layout

\begin_layout Standard
En este capítulo se explicara de manera detallada, cuáles fueron las decisiones
 tomadas a la hora de llevar a cabo las estrategias explicadas en el capítulo
 anterior.
 En partícular se pondrá énfasis en las plataformas utilizadas y las decisiones
 correspondientes al diseño de software en los diferentes componentes del
 sistema.
 Adicionalmente se explicaran algunos conceptos del sistema para una mejor
 comprensión.
\end_layout

\begin_layout Section
Aplicación Android
\end_layout

\begin_layout Standard
Haciendo uso de la gran variedad de funciones del sistema Android (Intents,
 IntentFilter, Services, Reseivers, etc), esta aplicación, será capaz de
 obtener una gran cantidad de datos, relacionados con el estado del dispositivo
 y el contexto en que es utilizado, para luego enviar estos datos a través
 de la red, hacia un servidor en el cual serán almacenados.
 A continuación se explicaran los componentes de la aplicación así como
 también los métodos utilizados y el diseño del sistema.
 
\end_layout

\begin_layout Subsection
Conceptos básicos
\begin_inset CommandInset label
LatexCommand label
name "sub:Conceptos-básicos"

\end_inset


\end_layout

\begin_layout Standard
Dentro del sistema se hace uso de tres conceptos básicos, a la hora de almacenar
 los diferentes tipos de indicadores de actividades del usuario.
 Estos conceptos simplifican la lectura de los datos recolectados y permiten
 cierta flexibilidad en caso de que sea necesario agregar información.
 A su vez permiten minimizar el espacio de almacenamiento requerido y recursos
 de CPU al momento de analizar los datos.
\end_layout

\begin_layout Standard
El formato utilizado para almacenar cada línea de log es el siguiente:
\noun on

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\noun on
[HORA]&[TIPO]&[PROP1::VALOR1|PROP2::VALOR2|...|PROP_N::VALOR_N]
\begin_inset CommandInset label
LatexCommand label
name "ejm:LineaLog"

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
A continuación se explicaran dichos conceptos básicos, así como también
 se mostrarán ejemplos prácticos para su mejor comprensión.
\end_layout

\begin_layout Itemize
Tipo
\end_layout

\begin_layout Standard
Para una buena organización de la información obtenida es necesario definir
 una estructura simple y ordenada.
 De esta manera surge la noción de tipos de log.
 Cada tipo de log engloba un conjunto de datos propios de la característica
 que monitorea.
 Algunos ejemplos de tipos de log pueden ser: WIFI, BLUETHOOT, BATTERY,
 ACTIVITY, CONNECTION, LOCATION, etc.
 Cada uno de estos se corresponde con una característica específica del
 dispositivo y contiene un número variable de propiedades relacionadas a
 esta.
 Cada línea generada en el log estará encabezada por el horario y el tipo
 al cual pertenece el cambio de estado detectado.
\end_layout

\begin_layout Itemize
Propiedad
\end_layout

\begin_layout Standard
Una vez definidos los tipos de logs, es necesario definir cuál es el conjunto
 de datos de interés que se quieren almacenar.
 El conjunto de propiedades definidas para cada tipo de log, identifica
 cuales son los valores más relevantes, relacionados con un evento específico
 dentro de la aplicación, que deben ser almacenados.
 Un ejemplo de propiedades, dentro del tipo de log WIFI, son la dirección
 ip y el nombre de la red, definidos como 
\shape italic
IP
\shape default
 y 
\shape italic
NAME
\shape default
 respectivamente.
\end_layout

\begin_layout Itemize
Value
\end_layout

\begin_layout Standard
Haciendo uso de los conceptos explicados hasta el momento, podemos definir
 la estructura base para un evento específico.
 Un evento monitoreado por la aplicación, almacenara un conjunto de datos
 definidos por el tipo del log al que pertenece y el conjunto de propiedades
 que lo conforman.
 Definimos Valor como el valor almacenado en un momento dado, para una Propiedad
 específica, incluida en el tipo de log monitoreado.
 Cabe destacar que una Propiedad pude tener únicamente un Valor en un momento
 dado.
\noun on

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\noun on
[09:15:11]&[WIFI]&[STATE::1|SSID::Ei200P|MAC::C0:65:99:A7:BC:E0|IACCESS::1]
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Como se puede observar en el ejemplo, adicionalmente a la estructura explicada
 con anterioridad, se almacena el momento exacto en el cual fue capturado
 el evento, con el fin de ordenar cronológicamente la información de ser
 necesario.
 
\end_layout

\begin_layout Subsection
Componentes
\begin_inset CommandInset label
LatexCommand label
name "sub:Componentes"

\end_inset


\end_layout

\begin_layout Standard
La aplicación móvil está compuesta por tres grupos de componentes, los cuales
 son los encargados de realizar las funcionalidades más importantes de la
 misma.
 Tanto la funcionalidad como el diseño de estos componentes utilizan mecanismos
 provistos por la plataforma Android como 
\emph on
Service
\emph default
, 
\emph on
BroadcastReceiver 
\emph default
e 
\emph on
Intents
\emph default
.
\noun on

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
• 
\emph on
Intent
\emph default
: Se utiliza para comunicar componentes en una aplicación Android
\noun on

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
• 
\emph on
Intent-Filter
\emph default
: nos permite filtrar los diferentes 
\emph on
Intents
\emph default
 del sistema y realizar diferentes tareas dependiendo del tipo de Intent
 esperado.
\noun on

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
• 
\emph on
Activity
\emph default
: Es un componente el cual posee una interface gráfica con la cual la aplicación
 interactúa con el usuario.
\noun on

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
• 
\emph on
BroadcastReceiver
\emph default
: responde a la emisión de un Intent particular haciendo uso de 
\emph on
Intent-Filters
\emph default
.
 Estos componentes permanecen inactivos y son ejecutado al momento de recibir
 un Intent esperado.
 
\noun on

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
• 
\emph on
Service
\emph default
: es un componente que corre, en todo momento, en segundo plano sin interacción
 con el usuario y sin una interface gráfica, el cual se comunica con 
\emph on
Activities
\emph default
 atreves de Intents 
\noun on

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsubsection
Receivers
\begin_inset CommandInset label
LatexCommand label
name "sub:Receivers"

\end_inset


\end_layout

\begin_layout Standard
Heredando de la clase abstracta 
\emph on
GeneralLoggingReceiver
\emph default
, la cual provee la funcionalidad de escritura en el log, estos componentes,
 permiten el monitoreo de un determinado Tipo de Log.
 Cada receiver registra un único Tipo de Log y durante su ejecución, al
 momento de detectar el evento correspondiente, obtiene un listado de pares
 Propiedad-Valor del sistema, que luego serán almacenados en un archivo.
 Dado que los dispositivos incluyen nuevas características con el rápido
 avance de la tecnología, esta herencia permite la inclusión de nuevos Tipo
 de Log y su correspondiente Receiver responsable del monitoreo.
\end_layout

\begin_layout Standard
Los Receivers utilizan el comportamiento provisto por las clases 
\emph on
BroadcastReceiver
\emph default
 y los
\emph on
 Intent-Filter
\emph default
, propias del sistema operativo Android.
 Un 
\emph on
Receiver
\emph default
 es activado por llamadas a través de 
\emph on
Intents
\emph default
.
 Para lograr esto se utilizan 
\emph on
Intent-Filters
\emph default
 con los cuales se filtran las llamadas del sistema, para solo atender a
 las llamadas que correspondan y/o sean de interés.
\end_layout

\begin_layout Standard
El sistema Android lanza eventos, en forma de 
\emph on
Intents
\emph default
, cuando ocurre un acontecimiento importante, como un cambio de estado en
 el dispositivo.
 Cada 
\emph on
Receiver
\emph default
 es activado solo por los 
\emph on
Intents
\emph default
 definidos en su 
\emph on
Intent-Filter
\emph default
, de esta manera, por ejemplo, en caso de un cambio de estado de la Batería,
 solo se ejecutara el 
\emph on
Receiver
\emph default
 encargado de monitorear la Batería.
 Este mecanismo es muy eficiente ya que nos permite ejecutar tareas atómicas
 vinculadas únicamente a un cambio de estado específico en el dispositivo.
\begin_inset CommandInset ref
LatexCommand ref
reference "img:Diagrama Sequencia"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "img:Diagrama Clases"

\end_inset


\end_layout

\begin_layout Standard
Cada 
\emph on
Intent
\emph default
 utilizado por los 
\emph on
Receivers
\emph default
 debe ser incluido en el archivo 
\emph on
AndriodManifest.xml
\emph default
 de la aplicación.
 De esta manera al momento de la instalación se obtienen los permisos de
 sistema operativo para acceder la información específica de cada característica
 que se desea monitorear.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../imagenes/Secuencia LogService.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Diagrama de secuencia Log-Event se puede observar el mecanismo de monitoreo
 del sistema.
 Nótese en la imagen los componentes Receiver y Command se refieran a instancias
 específicas de las clases GeneralLogReceiver y LogCommand respectivamente.
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "img:Diagrama Sequencia"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Servicio
\end_layout

\begin_layout Standard
Este componente es el encargado de monitorear el dispositivo constantemente,
 haciendo uso de los 
\emph on
Receivers 
\emph default
(ver
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Receivers"

\end_inset

) del sistema.
 Este componente se activa en el momento en que se enciende el aparato,
 durante su proceso de creación el servicio se encarga de inicializar la
 totalidad de los Receivers que serán utilizados en el monitoreo.
 El servicio es el componente esencial de la aplicación, ya que conserva
 activos en memoria los diferentes objetos involucrados en el monitoreo
 y captura de la información del dispositivo.
 
\end_layout

\begin_layout Standard
En la plataforma Android, un servicio puede ser ejecutado en modo Foreground
 o en modo Background.
 
\end_layout

\begin_layout Itemize
Foreground: El sistema reconoce al servicio como un proceso del cual el
 usuario no es consciente de manera activa, de esta manera en caso de necesitar
 recursos, el sistema intentara no eliminar este proceso.
 
\end_layout

\begin_layout Itemize
Background: Es el modo de ejecución por defecto en la plataforma Android.
 En este caso el sistema considerara que el proceso puede ser eliminado
 sin problemas en caso de necesitar recursos.
 
\end_layout

\begin_layout Standard
Ya sea en modo Foreground así como en Background, el sistema puede eliminar
 el proceso de ser necesario, por ejemplo en caso de necesitar memoria RAM
 para ejecutar un proceso con mas prioridad.
 
\end_layout

\begin_layout Standard
En esta aplicación se decidió utilizar el modo Foreground ya que el monitoreo
 del dispositivo no es un proceso del cual el usuario deba estar pendiente,
 y adicionalmente le da una mayor prioridad al servicio con el objetivo
 de mantenerse la aplicación en funcionamiento el mayor tiempo posible.
 En caso de que el sistema decida eliminar el proceso, durante su destrucción,
 el servicio intentara ejecutarse a sí mismo.
 Este mecanismo permite que la aplicación se inicialice nuevamente, permitiendo
 el logueo ininterrumpido de datos.
 En caso de que esta estrategia no funcione y el servicio sea eliminado,
 se deberá inicializar manualmente.
 Durante la ejecución de este componente, se muestra en la barra de estado
 del dispositivo una notificación de que dicho servicio se encuentra corriendo.
 
\end_layout

\begin_layout Subsubsection
Commands y CommandManager
\end_layout

\begin_layout Standard
Dentro de la aplicación existe el componente 
\emph on
CommandManager
\emph default
, en el cual se mantiene un registro del estado actual del dispositivo.
 Esto permite saber en cualquier momento cual es el último estado en el
 que se encontraba el sistema.
 Este estado está representado por un vector de valores en un objeto del
 tipo 
\emph on
HashTable
\emph default
.
 Cuando un nuevo evento es detectado por los 
\emph on
Receivers
\emph default
 del sistema, los datos son persistidos en el archivo de log, actualizando
 además dicho vector de estados.
 
\end_layout

\begin_layout Standard
Este componente también nos permite disminuir significativamente el espacio
 requerido por los archivos de logs.
 Los datos registrados en el log en cada evento específico, están formados
 por un sub-vector del vector de estados.
 De esta manera, solo se permite el logueo de la información si el nuevo
 sub-vector difiere del sub-vector correspondiente al último estado almacenado.
\begin_inset CommandInset ref
LatexCommand ref
reference "img:CodigoFuente"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Ejemplo Logueo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "img:CodigoFuente"

\end_inset


\end_layout

\begin_layout LyX-Code
Hashtable<String, String> properties = l.getProperties(); 
\end_layout

\begin_layout LyX-Code
Enumeration<String> enumKey = properties.keys(); 
\end_layout

\begin_layout LyX-Code
While (enumKey.hasMoreElements() {
\end_layout

\begin_deeper
\begin_layout LyX-Code
property = enumKey.nextElement; 
\end_layout

\begin_layout LyX-Code
value = properties.get (property); 
\end_layout

\begin_layout LyX-Code
change |= LogCommandManager.getInstance().
\end_layout

\begin_deeper
\begin_layout LyX-Code
newState(l.getType(),property,value); 
\end_layout

\end_deeper
\end_deeper
\begin_layout LyX-Code
} 
\end_layout

\begin_layout LyX-Code
If (change) 
\end_layout

\begin_deeper
\begin_layout LyX-Code
LogSave.getInstance().saveData(l);
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
El listado de código
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "img:CodigoFuente"

\end_inset

 muestra que solo en el caso de que la variable 
\emph on
“change”
\emph default
 sea verdadera se registra la información.
 Este mecanismo provee flexibilidad para agregar nuevos tipos de logs e
 incrementar el número de 
\emph on
Propiedades
\emph default
 dentro de un tipo de log, sin alterar el funcionamiento descripto.
\end_layout

\begin_layout Standard
Dentro del 
\emph on
CommandManager
\emph default
 también existen 
\emph on
Commands
\emph default
.
 Cada 
\emph on
Command
\emph default
 hereda la interfase y funcionalidad de un 
\emph on
Command
\emph default
 abstracto y es capaz de realizar una tarea específica, mediante el uso
 de su método 
\emph on
execute
\emph default
.
 Estos objetos son utilizados para realizar tareas programadas dentro de
 la aplicación, como por ejemplo el envió de datos al servidor.
\begin_inset CommandInset ref
LatexCommand ref
reference "img:Diagrama Clases"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "img:Diagrama Sequencia"

\end_inset


\end_layout

\begin_layout Standard
Es posible configurar cada 
\emph on
Command
\emph default
 mediante el uso de las reglas, 
\emph on
Rules
\emph default
.
 Cada 
\emph on
Rule
\emph default
 contiene un sub-vector compuesto por pares Propiedad-Valor y una clave
 que indica el tipo de 
\emph on
Command
\emph default
 a ejecutar, de esta manera, cuando el sub-vector configurado coincide con
 el estado actual del dispositivo, el 
\emph on
CommandManager
\emph default
 ejecuta el 
\emph on
Command
\emph default
 correspondiente.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../imagenes/Object Diagram.jpg
	lyxscale 85
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Diagrama de Clases: Aplicación Android
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "img:Diagrama Clases"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Comunicación de Datos
\begin_inset CommandInset label
LatexCommand label
name "sub:Comunicación-de-Datos"

\end_inset


\end_layout

\begin_layout Standard
Toda la información generada por la aplicación, será almacenada en archivos
 de texto plano, siguiendo el formato especifico explicado en la seccion
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Conceptos-básicos"

\end_inset

.
 Con el objetivo de almacenar la información de manera organizada, se decidió
 generar archivo por día dentro de un directorio creado por la aplicación.
 El nombre de cada archivo contiene la fecha en la cual fue generado y la
 información correspondiente.
 De esta manera también logramos reducir el espacio requerido, ya que no
 es necesario registrar la fecha en cada línea del archivo.
\end_layout

\begin_layout Standard
Con el objetivo de no producir consumo de energía de la batería del dispositivo
 a la hora de enviar los datos recolectados al servidor, la aplicación,
 por defecto, envia los datos solo si el aparato se encuentra cargando la
 batería.
 Adicionalmente, para evitar incurrir en gastos por el uso de redes de telefonía
 celular, la aplicación también verifica antes de enviar los datos que se
 cuente con conexión a internet mediante una red WIFI.
 Otra ventaja de las redes WIFI sobre las redes 3G es que, en general, proveen
 una velocidad de acceso a Internet superior
\end_layout

\begin_layout Standard
Para evitar fragmentar los datos recolectados, se decidió no enviar el archivo
 correspondiente al día en curso, debido a que es probable que continúe
 siendo utilizado.
 Una vez que se obtiene la lista de archivos a enviar, se genera un paquete
 comprimido y este es enviado al servidor.
\end_layout

\begin_layout Section
WebService
\begin_inset CommandInset label
LatexCommand label
name "sec:WebService"

\end_inset


\end_layout

\begin_layout Standard
Para realizar la comunicación de datos entre el dispositivo móvil y el servidor
 se utiliza un WebService SOAP, el cual debido a su protocolo estandarizado
 nos permite comunicar sin problemas diferentes tecnologías, como son en
 este caso, un servidor desarrollado sobre la plataforma .Net, con una aplicación
 Android.
 Este WebService provee los métodos para almacenar los datos recolectados
 por los usuarios en una base de datos relacional, que corre sobre un motor
 SQLServer Express.
\end_layout

\begin_layout Standard
Como se explicó anteriormente , es el servidor el encargado de realizar
 las tareas mas costosas en cuanto a recursos.
\end_layout

\begin_layout Subsection
Componentes
\begin_inset CommandInset label
LatexCommand label
name "sub:Componentes-1"

\end_inset


\end_layout

\begin_layout Standard
El WebService está constituído por un punto de acceso público, a través
 del cual los usuarios pueden enviar la información, y por diferentes componente
s encargados de realizar las tareas de procesamiento y almacenamiento de
 los datos generados por los usuarios.
 A continuación se explicaran en detalle cada uno de estos componentes.
\begin_inset CommandInset ref
LatexCommand ref
reference "img:Sequencia Paquete Datos"

\end_inset


\end_layout

\begin_layout Subsubsection
Recepción de Datos
\end_layout

\begin_layout Standard
Utilizando el punto de acceso el usuario envía un archivo comprimido.
 Dentro de este paquete de datos pueden existir una cantidad variable de
 documentos, uno por cada día de logueo, dependiendo de cuantos días han
 transcurrido desde la última conexión.
 Una vez almacenado, en un directorio local, el WebService envía una confirmació
n al cliente indicando que el archivo fue recibido correctamente.
\end_layout

\begin_layout Subsubsection
Procesamiento de Datos
\end_layout

\begin_layout Standard
Una vez finalizada la comunicación y una vez descomprimidos los documentos,
 el servidor comienza el procesamiento de los datos recibidos en el paquete.
 El procesamiento de los datos se realiza de manera secuencial por orden
 cronológico.
 El sistema lee cada documento realizando un parseo de sus datos, obteniendo
 los Log-Types, sus Properties y Values, para luego almacenar los datos
 en la base de datos relacional.
 Cuando finaliza el procesamiento de los datos, los documentos son eliminados
 conservando un backup del paquete recibido.
\end_layout

\begin_layout Subsubsection
Almacenamiento de Datos
\end_layout

\begin_layout Standard
Los paquetes recibidos por el WebService son almacenados en un directorio
 para cada usuario específico, creado por el mismo servicio.
 En el caso de existir un error en el procesamiento de un documento, este
 no será eliminado del directorio.
 De esta manara es posible verificar fácilmente los datos procesados incorrectam
ente.
 Los datos procesados correctamente son almacenados en la base de datos,
 en la cual se registran la información relacionada a sus documentos y el
 usuario de origen.
 De esta manera es posible localizar para cada dato almacenado, cual fue
 su paquete de origen, así como su documento dentro de este y a que usuario
 pertenece.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../imagenes/Secuencia WebService.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Diagrama de Secuencia, procesamiento del paquete de datos
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "img:Sequencia Paquete Datos"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Base de Datos
\begin_inset CommandInset label
LatexCommand label
name "sec:Base-de-Datos"

\end_inset


\end_layout

\begin_layout Standard
Debido a la gran cantidad de información obtenida por la aplicación y la
 necesidad de consultar de diferentes formas los datos obtenidos para la
 búsqueda de patrones, es indispensable la correcta organización de los
 datos y la utilización de una estrategia que nos permita obtener información
 de manera eficaz.
 Es por este motivo que se utiliza una base de datos relacional, controlada
 por el motor de bases de datos SQLServer Express.
\end_layout

\begin_layout Subsection
Estructura
\end_layout

\begin_layout Standard
Dentro de la base de datos, la información se encuentra organizada en diferentes
 tablas de manera tal que nos permita optimizar el espacio utilizado A continuac
ión se describen cada una de las tablas utilizadas y de qué manera se utiliza
 su información.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "img:Estructura Datos"

\end_inset


\end_layout

\begin_layout Paragraph
User
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Almacena la información de los usuarios registrados en el sistema.
 En base a los datos de esta tabla se puede obtener la fecha de la última
 conexión, la versión y modelo de dispositivo utilizado y un identificador
 único del aparato.
 
\end_layout

\begin_layout Paragraph
File
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Almacdena los datos correspondientes a los documentos procesados por el
 servicio, se pueden obtener datos como el tamaño, nombre y a que usuario
 pertenece.
 
\end_layout

\begin_layout Paragraph
LocationGroup
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Almacena los 
\emph on
LocationGroups
\emph default
 pertenecientes a cada usuario, ubicación del 
\emph on
LocationGroup
\emph default
 y la cantidad de localizaciones que contiene.
 
\end_layout

\begin_layout Paragraph
Type 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Contiene el listado de LogTypes utilizado por la aplicación a la hora de
 registrar eventos en el dispositivo.
 
\end_layout

\begin_layout Paragraph
Property 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Almacena un listado de cada posible 
\emph on
LogProperty
\emph default
 relacionada con su 
\emph on
LogType
\emph default
 correspondiente.
 
\end_layout

\begin_layout Paragraph
PropertyValue 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Se encuentran los posibles valores para cada 
\emph on
LogProperty
\emph default
, los cuales pueden ser compartidos por diferentes usuarios.
 Un ejemplo recurrente es el caso en el que dos usuarios se conectan a una
 misma red Wifi.
 
\end_layout

\begin_layout Paragraph
Rule
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Contiene las reglas especificadas para cada usuario del sistema, así como
 un código que indica que comando se deberá ejecutar cuando esta se cumpla.
 
\end_layout

\begin_layout Paragraph
Condition
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Almacena las condiciones de una regla específica.
 Cada una de estas indica un 
\emph on
LogProperty
\emph default
 y su 
\emph on
PropertyValue
\emph default
 necesarios para que la condición pueda ser validada.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../imagenes/Base de Datos.jpg
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Estructura Base de Datos
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "img:Estructura Datos"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
